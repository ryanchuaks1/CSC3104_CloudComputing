# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import device_pb2 as device__pb2


class DeviceStub(object):
    """Device definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.add_new_device = channel.unary_unary(
                '/device.Device/add_new_device',
                request_serializer=device__pb2.Item.SerializeToString,
                response_deserializer=device__pb2.Reply.FromString,
                )
        self.delete_device = channel.unary_unary(
                '/device.Device/delete_device',
                request_serializer=device__pb2.Item.SerializeToString,
                response_deserializer=device__pb2.Reply.FromString,
                )
        self.get_all_devices = channel.unary_unary(
                '/device.Device/get_all_devices',
                request_serializer=device__pb2.Item.SerializeToString,
                response_deserializer=device__pb2.Reply.FromString,
                )


class DeviceServicer(object):
    """Device definition
    """

    def add_new_device(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_device(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_all_devices(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DeviceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'add_new_device': grpc.unary_unary_rpc_method_handler(
                    servicer.add_new_device,
                    request_deserializer=device__pb2.Item.FromString,
                    response_serializer=device__pb2.Reply.SerializeToString,
            ),
            'delete_device': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_device,
                    request_deserializer=device__pb2.Item.FromString,
                    response_serializer=device__pb2.Reply.SerializeToString,
            ),
            'get_all_devices': grpc.unary_unary_rpc_method_handler(
                    servicer.get_all_devices,
                    request_deserializer=device__pb2.Item.FromString,
                    response_serializer=device__pb2.Reply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'device.Device', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Device(object):
    """Device definition
    """

    @staticmethod
    def add_new_device(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/device.Device/add_new_device',
            device__pb2.Item.SerializeToString,
            device__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_device(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/device.Device/delete_device',
            device__pb2.Item.SerializeToString,
            device__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_all_devices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/device.Device/get_all_devices',
            device__pb2.Item.SerializeToString,
            device__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
