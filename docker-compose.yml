version: '3.8'

services:
  server:
    build: cloud
    container_name: server
    restart: always
    ports:
      - 5001:5001
    networks:
      - location-system

  mariadb:
    image: mariadb
    container_name: mariadb
    restart: always
    environment:
      - MARIADB_DATABASE=mysql_db
      - MARIADB_ROOT_PASSWORD=secret
      - MARIADB_USER=user
      - MARIADB_PASSWORD=password
    volumes:
      - ./cloud/mysql-import/mysql-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - location-system

  # phpmyadmin:
  #   image: phpmyadmin/phpmyadmin
  #   container_name: phpmyadmin
  #   restart: always
  #   environment:
  #     PMA_HOST: mariadb
  #     PMA_PORT: 3306
  #     PMA_ARBITRARY: 1
  #   ports:
  #     - 127.0.0.1:8080:8080
  #   depends_on:
  #     - mariadb
  #   networks:
  #     - location-system

  kafka:
    image: bitnami/kafka:3.5
    container_name: kafka
    ports:
      - '9092:9092'
    environment:
      # Unqiue Broker ID
      - KAFKA_BROKER_ID=1
      - KAFKA_ENABLE_KRAFT=no
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
    depends_on:
      - zookeeper
    networks:
      - location-system

  zookeeper:
    image: bitnami/zookeeper:3.9
    container_name: zookeeper
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - location-system

  # web-server:
  #   build:
  #     context: ./server
  #     dockerfile: Dockerfile
  #   container_name: web-server
  #   ports:
  #     - '8080:8080'
  #   networks:
  #     - location-system
  #   command: npm start

  consumer-service:
    build:
      context: ./kafka-consumer
      dockerfile: Dockerfile
    container_name: consumer-service
    networks:
      - location-system
    ports:
      - '50051:50051'
    volumes:
      - kafka-data:/usr/src/app/data/:rw
    depends_on:
      - kafka
      - producer-service
    command: npm start

  producer-service:
    build:
      context: ./kafka-producer
      dockerfile: Dockerfile
    container_name: producer-service
    networks:
      - location-system
    ports:
      - '50052:50052'
    volumes:
      - kafka-data:/usr/src/app/data/:ro
    depends_on:
      - kafka
      # - admin-service
    command: npm start

  # admin-service:
  #   build:
  #     context: ./kafka-admin
  #     dockerfile: Dockerfile
  #   container_name: admin-service
  #   networks:
  #     - location-system
  #   depends_on:
  #     - kafka
  #     - zookeeper
  #   command: npm start

networks:
  location-system:
    driver: bridge

volumes:
  kafka-data:
