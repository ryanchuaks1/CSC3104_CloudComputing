version: '3.8'

services:
  server:
    build: cloud
    container_name: server
    restart: always
    profiles: ['server', 'all']
    ports:
      - 5000:5000
    depends_on:
      - mongodb
    networks:
      - app_network

  mariadb:
    image: bitnami/mariadb-galera:latest
    restart: always
    profiles: ['server', 'all']
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - MARIADB_DATABASE=mysql_db
      - MARIADB_USER=user
      - MARIADB_PASSWORD=password
    volumes:
      - ./cloud/mysql-import/mysql-init.sql:/docker-entrypoint-startdb.d/mysql-init.sql:ro
    deploy:
      mode: replicated
      replicas: 3
    networks:
      - app_network

  mongodb:
    image: docker.io/bitnami/mongodb-sharded:6.0
    container_name: mongodb
    restart: always
    profiles: ['server', 'all']
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongodb
      - MONGODB_SHARDING_MODE=mongos
      - MONGODB_CFG_PRIMARY_HOST=mongodb-cfg
      - MONGODB_CFG_REPLICA_SET_NAME=cfgreplicaset
      - MONGODB_REPLICA_SET_KEY=replicasetkey
      - MONGODB_ROOT_PASSWORD=password
    networks:
      - app_network

  mongodb-shard0:
    image: docker.io/bitnami/mongodb-sharded:6.0
    container_name: mongodb-shard0
    restart: always
    profiles: ['server', 'all']
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongodb-shard0
      - MONGODB_SHARDING_MODE=shardsvr
      - MONGODB_MONGOS_HOST=mongodb
      - MONGODB_ROOT_PASSWORD=password
      - MONGODB_REPLICA_SET_MODE=primary
      - MONGODB_REPLICA_SET_KEY=replicasetkey
      - MONGODB_REPLICA_SET_NAME=shard0
    networks:
      - app_network

  mongodb-shard1:
    image: docker.io/bitnami/mongodb-sharded:6.0
    container_name: mongodb-shard1
    restart: always
    profiles: ['server', 'all']
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongodb-shard1
      - MONGODB_SHARDING_MODE=shardsvr
      - MONGODB_MONGOS_HOST=mongodb
      - MONGODB_ROOT_PASSWORD=password
      - MONGODB_REPLICA_SET_MODE=primary
      - MONGODB_REPLICA_SET_KEY=replicasetkey
      - MONGODB_REPLICA_SET_NAME=shard1
    networks:
      - app_network

  mongodb-shard2:
    image: docker.io/bitnami/mongodb-sharded:6.0
    container_name: mongodb-shard2
    restart: always
    profiles: ['server', 'all']
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongodb-shard2
      - MONGODB_SHARDING_MODE=shardsvr
      - MONGODB_MONGOS_HOST=mongodb
      - MONGODB_ROOT_PASSWORD=password
      - MONGODB_REPLICA_SET_MODE=primary
      - MONGODB_REPLICA_SET_KEY=replicasetkey
      - MONGODB_REPLICA_SET_NAME=shard2
    networks:
      - app_network

  mongodb-cfg:
    image: docker.io/bitnami/mongodb-sharded:6.0
    container_name: mongodb-cfg
    restart: always
    profiles: ['server', 'all']
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongodb-cfg
      - MONGODB_SHARDING_MODE=configsvr
      - MONGODB_ROOT_PASSWORD=password
      - MONGODB_REPLICA_SET_MODE=primary
      - MONGODB_REPLICA_SET_KEY=replicasetkey
      - MONGODB_REPLICA_SET_NAME=cfgreplicaset
    networks:
      - app_network

  mongoimport:
    build:
      context: ./cloud/mongo-import
    container_name: mongoimport
    profiles: ['server', 'all']
    depends_on:
      - mongodb
    networks:
      - app_network

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    restart: always
    profiles: ['all']
    environment:
      PMA_HOST: mariadb
      PMA_PORT: 3306
      PMA_ARBITRARY: 1
    ports:
      - 127.0.0.1:8080:8080
    depends_on:
      - mariadb
    networks:
      - app_network

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: always
    profiles: ['all']
    ports:
      - 127.0.0.1:8081:8081
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongodb
    depends_on:
      - mongodb
    networks:
      - app_network

# Kafka Services

  kafka:
    image: bitnami/kafka:3.5
    container_name: kafka
    ports:
      - '9092:9092'
    environment:
      # Unqiue Broker ID
      - KAFKA_BROKER_ID=1
      - KAFKA_ENABLE_KRAFT=no
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
    depends_on:
      - zookeeper
    networks:
      - location-system

  zookeeper:
    image: bitnami/zookeeper:3.9
    container_name: zookeeper
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - location-system

  # web-server:
  #   build:
  #     context: ./server
  #     dockerfile: Dockerfile
  #   container_name: web-server
  #   ports:
  #     - '8080:8080'
  #   networks:
  #     - location-system
  #   command: npm start

  consumer-service:
    build:
      context: ./kafka-consumer
      dockerfile: Dockerfile
    container_name: consumer-service
    networks:
      - location-system
    ports:
      - '50051:50051'
    depends_on:
      - kafka
      - producer-service
    command: npm start
  
  producer-service:
    build:
      context: ./kafka-producer
      dockerfile: Dockerfile
    container_name: producer-service
    networks:
      - location-system
    ports:
      - '50052:50052'
    depends_on:
      - kafka
      # - admin-service
    command: npm start

  # admin-service:
  #   build:
  #     context: ./kafka-admin
  #     dockerfile: Dockerfile
  #   container_name: admin-service
  #   networks:
  #     - location-system
  #   depends_on:
  #     - kafka
  #     - zookeeper
  #   command: npm start

networks:
  location-system:
    driver: bridge
  app_network:
